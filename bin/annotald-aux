#!/usr/bin/env python2

import argparse
import codecs
import os
import sys

import nltk.tree as T

# TODO: document in user manual

def hash_file(args):
    if len(args) != 1:
        print "You must specify exactly one file to hash."
        sys.exit(1)
    filename = args[0]
    print "Computing hash for %s." % filename
    contents = codecs.open(filename, "r", "utf-8").read()
    trees = contents.split("\n\n")
    vc = trees[0]
    if T.Tree(vc)[0].node != "VERSION":
        print "This file has no version cookie; adding."
        vc = "( (VERSION (HASH (MD5 none))))"
    else:
        trees = trees[1:]
        if annotald.util.queryVersionCookie(vc, "HASH.MD5"):
            print "Old hash present; overwriting."
        else:
            print "Adding hash to pre-existing version cookie."
    new_hash = annotald.util.hashTrees("\n\n".join(trees), vc)
    vc = annotald.util.updateVersionCookie(vc, "HASH.MD5", new_hash)
    annotald.util.writeTreesToFile(vc, "\n\n".join(trees), filename)
    print "Hash successfully updated."

def main(args):
    if args.cmd == "hash-file":
        hash_file(args.rest)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description = "A helper script for various Annotald functions")
    parser.add_argument("-d", "--dev", dest = "dev", action = "store_true")
    parser.add_argument("cmd", choices = ["hash-file"])
    parser.add_argument("rest", nargs = "+")
    args = parser.parse_args(sys.argv[1:])

    if args.dev:
        print "dev active"
        sys.path.append(os.path.dirname(os.path.abspath(__file__)) + "/..")
    import annotald.util
    
    main(args)

