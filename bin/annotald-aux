#!/usr/bin/env python2

import argparse
import codecs
import os
import sys

import nltk.tree as T

# TODO: document in user manual

def hash_file(args):
    if len(args) != 1:
        print "You must specify exactly one file to hash."
        sys.exit(1)
    filename = args[0]
    print "Computing hash for %s." % filename
    contents = codecs.open(filename, "r", "utf-8").read()
    trees = contents.split("\n\n")
    vc = T.Tree(trees[0])
    if vc[0].node != "VERSION":
        print "This file has no version cookie; adding."
        vc = T.Tree("( (VERSION (HASH (MD5 none))))")
    else:
        trees = trees[1:]
        if annotald.util.queryVersionCookie(unicode(vc), "HASH.MD5"):
            print "Old hash present; overwriting."
        else:
            print "Adding hash to pre-existing version cookie."
            tmp = filter(lambda h: h.node == "HASH", vc[0])
            if len(tmp) == 0:
                vc[0].append(T.Tree("(HASH (MD5 none))"))
            elif len(tmp) == 1:
                tmp[0].append(T.Tree("(MD5 none)"))
            else:
                raise util.AnnotaldError("Does your version cookie have two HASH entries?")
    new_hash = annotald.util.hashTrees("\n\n".join(trees), unicode(vc))
    h = filter(lambda h: h.node == "HASH", vc[0])[0]
    hn = filter(lambda h: h.node == "MD5", h)[0]
    hn[0] = new_hash
    print vc
    annotald.util.writeTreesToFile(unicode(vc), "\n\n".join(trees), filename)
    print "Hash successfully updated."

def main(args):
    if args.cmd == "hash-file":
        hash_file(args.rest)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description = "A helper script for various Annotald functions")
    parser.add_argument("-d", "--dev", dest = "dev", action = "store_true")
    parser.add_argument("cmd", choices = ["hash-file"])
    parser.add_argument("rest", nargs = "+")
    args = parser.parse_args(sys.argv[1:])

    if args.dev:
        print "dev active"
        sys.path.append(os.path.dirname(os.path.abspath(__file__)) + "/..")
    import annotald.util
    
    main(args)

