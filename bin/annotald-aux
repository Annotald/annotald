#!/usr/bin/env python2

import argparse
import codecs
import os
import sys

import nltk.tree as T

# TODO: document in user manual

def hash_file(args):
    filename = args.filename[0]
    print "Computing hash for %s." % filename
    contents = codecs.open(filename, "r", "utf-8").read()
    trees = contents.split("\n\n")
    vc = trees[0]
    if T.Tree(vc)[0].node != "VERSION":
        print "This file has no version cookie; adding."
        vc = "( (VERSION (HASH (MD5 none))))"
    else:
        trees = trees[1:]
        if annotald.util.queryVersionCookie(vc, "HASH.MD5"):
            print "Old hash present; overwriting."
        else:
            print "Adding hash to pre-existing version cookie."
    new_hash = annotald.util.hashTrees("\n\n".join(trees), vc)
    vc = annotald.util.updateVersionCookie(vc, "HASH.MD5", new_hash)
    annotald.util.writeTreesToFile(vc, "\n\n".join(trees), filename)
    print "Hash successfully updated."

def convert_file(args):
    filename = args.filename[0]
    with codecs.open(filename, "r", "utf-8") as f:
        trees = f.read()
    if args.cs:
        trees = annotald.util.scrubText(trees)
    annotald.util.writeTreesToFile(None, trees, filename)

def main(args):
    if args.cmd == "hash-file":
        hash_file(args.rest)
    elif args.cmd == "convert":
        convert_file(args.rest)

def parse_args(args):
    parser = argparse.ArgumentParser(description = "A helper script for various Annotald functions")
    parser.add_argument("-d", "--dev", dest = "dev", action = "store_true",
                        help = "Only for developer use")
    subparsers = parser.add_subparsers()
    hash_file_parser = subparsers.add_parser("hash-file", help = "add hash to a parsed file")
    hash_file_parser.add_argument("filename", nargs = 1)
    hash_file_parser.set_defaults(func = hash_file)
    convert_parser = subparsers.add_parser("convert", help = "convert from another format algorithm")
    convert_parser.add_argument("-o", "--cs-output", dest = "cs", action = "store_true",
                                help = "strip CorpusSearch comments")
    convert_parser.add_argument("filename", nargs = 1)
    convert_parser.set_defaults(func = convert_file)
    args = parser.parse_args(args)
    return args

if __name__ == "__main__":
    args = parse_args(sys.argv[1:])
    if args.dev:
        print "dev active"
        sys.path.append(os.path.dirname(os.path.abspath(__file__)) + "/..")
    import annotald.util
    
    args.func(args)
